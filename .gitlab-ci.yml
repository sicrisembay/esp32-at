stages:
  - build
  - deploy

build_esp32_at:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  tags:
    - build

  variables:
    IDF_PATH: "$CI_PROJECT_DIR/esp-idf"
    GIT_STRATEGY: clone
    
  artifacts:
    paths:
      - build/*.bin
      - build/*.elf
      - build/*.map
      - build/bootloader/*.bin
      - build/customized_partitions/*.bin
      - build/download.config
      - build/factory/*
    expire_in: 6 mos

  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git submodule update --init --recursive

  script:
    - cd main
    - rm -f at_config.h
    - echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
    - echo -e "#define __AT_CONFIG_H__" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM32 \"$AT_OTA_TOKEN_WROOM32\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROVER32 \"$AT_OTA_TOKEN_WROVER32\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_PICO_D4 \"$AT_OTA_TOKEN_ESP32_PICO_D4\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP32_SOLO_1 \"$AT_OTA_TOKEN_ESP32_SOLO_1\"" >> at_config.h
    - echo -e "#endif" >> at_config.h
    - cd -
    # replace submodule esp-idf to internal repository to speedup cloning
    - commit_str=$(awk '/commit:/{print $0}' module_config/module_esp32_default/IDF_VERSION)
    - branch_str=$(awk '/branch:/{print $0}' module_config/module_esp32_default/IDF_VERSION)
    - git clone -b ${branch_str#*branch:} ${GITLAB_SSH_SERVER}/idf/esp-idf.git
    - cd esp-idf
    - git checkout ${commit_str#*commit:}
    # (the same regular expressions are used to set these are used in 'only:' sections below
    - source ./tools/ci/configure_ci_environment.sh
    # fetch the submodules (& if necessary re-fetch repo) from gitlab
    - time ./tools/ci/get-full-sources.sh
    - git submodule update --init
    - cd -

    - make defconfig
    - make -j4
    - make print_flash_cmd | tail -n 1 > build/download.config
    - make factory_bin
    - make factory_bin ESP_AT_MODULE_NAME=WROVER-32
    - make factory_bin ESP_AT_MODULE_NAME=PICO-D4
    - make factory_bin ESP_AT_MODULE_NAME=SOLO-1

build_esp8266_wroom_02_at:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp8266-ci-env
  tags:
    - build

  variables:
    IDF_PATH: "$CI_PROJECT_DIR/esp-idf"
    GIT_STRATEGY: clone
    
  artifacts:
    paths:
      - build/*.bin
      - build/*.elf
      - build/*.map
      - build/bootloader/*.bin
      - build/customized_partitions/*.bin
      - build/download.config
      - build/factory/*
    expire_in: 6 mos

  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git submodule update --init --recursive

  script:
    - cd main
    - rm -f at_config.h
    - echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
    - echo -e "#define __AT_CONFIG_H__" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
    - echo -e "#endif" >> at_config.h
    - cd -

    # replace submodule esp-idf to internal repository to speedup cloning
    - commit_str=$(awk '/commit:/{print $0}' module_config/module_esp8266_default/IDF_VERSION)
    - branch_str=$(awk '/branch:/{print $0}' module_config/module_esp8266_default/IDF_VERSION)
    - git clone -b ${branch_str#*branch:} ${GITLAB_SSH_SERVER}/sdk/ESP8266_RTOS_SDK.git esp-idf
    - cd esp-idf
    - git checkout ${commit_str#*commit:}
    # (the same regular expressions are used to set these are used in 'only:' sections below
    - source ./tools/ci/configure_ci_environment.sh
    # fetch the submodules (& if necessary re-fetch repo) from gitlab
    # - time ./tools/ci/get-full-sources.sh
    - git submodule update --init
    - cd -

    - export ESP_AT_PROJECT_PLATFORM=PLATFORM_ESP8266
    - export ESP_AT_MODULE_NAME=WROOM-02
    - make defconfig
    - make -j4
    - make print_flash_cmd | tail -n 1 > build/download.config
    - make factory_bin

build_esp8266_wroom_5V2L_at:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp8266-ci-env
  tags:
    - build

  variables:
    IDF_PATH: "$CI_PROJECT_DIR/esp-idf"
    GIT_STRATEGY: clone
    
  artifacts:
    paths:
      - build/*.bin
      - build/*.elf
      - build/*.map
      - build/bootloader/*.bin
      - build/customized_partitions/*.bin
      - build/download.config
      - build/factory/*
    expire_in: 6 mos

  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git submodule update --init --recursive

  script:
    - cd main
    - rm -f at_config.h
    - echo -e "#ifndef __AT_CONFIG_H__" >> at_config.h
    - echo -e "#define __AT_CONFIG_H__" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_1024_1024\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
    - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_config.h
    - echo -e "#endif" >> at_config.h
    - cd -
    # replace submodule esp-idf to internal repository to speedup cloning
    - commit_str=$(awk '/commit:/{print $0}' module_config/module_esp8266_default/IDF_VERSION)
    - branch_str=$(awk '/branch:/{print $0}' module_config/module_esp8266_default/IDF_VERSION)
    - git clone -b ${branch_str#*branch:} ${GITLAB_SSH_SERVER}/sdk/ESP8266_RTOS_SDK.git esp-idf
    - cd esp-idf
    - git checkout ${commit_str#*commit:}
    # (the same regular expressions are used to set these are used in 'only:' sections below
    - source ./tools/ci/configure_ci_environment.sh
    # fetch the submodules (& if necessary re-fetch repo) from gitlab
    # - time ./tools/ci/get-full-sources.sh
    - git submodule update --init
    - cd -
    
    - export ESP_AT_PROJECT_PLATFORM=PLATFORM_ESP8266
    - export ESP_AT_MODULE_NAME=WROOM-5V2L
    - make defconfig
    - make -j4
    - make print_flash_cmd | tail -n 1 > build/download.config
    - make factory_bin

push_master_to_github:
  stage: deploy
  only:
    - master
    - /^release\/v.*$/
  tags:
    - deploy
  when: on_success
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  variables:
    GIT_STRATEGY: clone
    GITHUB_PUSH_REFS: refs/remotes/origin/release refs/remotes/origin/master
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote add github git@github.com:espressif/esp32-at.git
    # - git push --follow-tags github HEAD:master
    - eval $(git for-each-ref --shell bash --format 'if [ $CI_COMMIT_SHA == %(objectname) ]; then git checkout -B %(refname:strip=3); git push --follow-tags github %(refname:strip=3); fi;' $GITHUB_PUSH_REFS)
